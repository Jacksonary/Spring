<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!--基本数据库连接配置-->
        <property name="connection.username">root</property>
        <property name="connection.password">921228jack</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/db_studentinfo</property>
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>

        <!-- 数据库基本属性配置 -->
        <property name="hbm2ddl.auto">update</property>
        <property name="dialect">org.hibernate.dialect.MySQL57InnoDBDialect</property>
        <property name="show_sql">true</property>
        <property name="format_sql">true</property>

        <!--配置数据库连接池,可选属性，在和Spring整合时，不要忘了一定要加上hibernate的前缀-->
        <!--数据库连接池的最大连接数-->
        <property name="c3p0.max_size">10</property>

        <!--数据库连接池的最小连接数-->
        <property name="c3p0.min_size">3</property>

        <!--当数据库连接池中连接耗尽时，同一时刻获取多少个连接-->
        <property name="c3p0.acquire_increment">2</property>

        <!--数据库连接池中连接对象在空闲多长时间后被销毁-->
        <property name="c3p0.timeout">5000</property>

        <!--
        连接池检测线程多长时间检测一次池中所有连接对象是否超时，
        连接池本身不会把自己从连接池中移除，而是专门有一个线程周期性来干这事儿，
        通过比较连接对象最后一次使用的时间和当前时间的差值和timeout做对比，得出是否
        要销毁这个连接对象。
        -->
        <property name="c3p0.idle_test_period">2000</property>

        <!--缓存Statement对象的数量-->
        <property name="c3p0.max_statements">10</property>

        <!--设定JDBC的Statement读取数据的时候每次从数据库中读取的记录数，比如要
        读取100条记录，那么每次读取10条，分10次读，减少内存的消耗，实际开发中这个
        值通常取100
        -->
        <property name="jdbc.fetch_size">100</property>

        <!--设定对数据库进行批量操作时批次的数量，类似于缓冲区的大小，
        这个值越大，批量操作时的发送SQL的次数就越小，速度也就越快，
        实际开发中，这个值取30比较合适
        -->
        <property name="jdbc.batch_size">30</property>


        <!--由于存在外键的关联，所以这里需要注意一下加载的顺序，将Customer放在Order前面定义-->
        <mapping resource="com/hhu/both/Customer.hbm.xml"/>
        <mapping resource="com/hhu/both/Order.hbm.xml"/>
        
        <mapping class="com.hhu.both.Customer"/>
        <mapping class="com.hhu.both.Order"/>
    </session-factory>
</hibernate-configuration>